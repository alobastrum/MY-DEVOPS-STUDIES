#здесь работа с файловой системой BASH и основные команды 
основные системные каталоги  bin, boot, etc, root, sbin
дооплнительные каталоги 
home - домашние каталоги пользователей 
mnt - туда монтируются внешние устройства 
tmp - папка с временными файлами (очищается)
uptime - оказывает, сколько времени включен компьютер и load average (среднюю нагрузку).
uname - показывает основную информацию о системе (например, название ОС).
    *   **`uname -a`**: Показывает всю информацию о системе (название, версию ядра, архитектуру и т.д.).
*   **`lscpu`**: Показывает информацию о процессоре (модель, количество ядер, кэш).
*   **`clear`**: Очищает экран терминала.
*   **`echo <текст>`**: Выводит текст в стандартный вывод терминала. Полезно для скриптов.
*   **`Ctrl + C`**: Прерывает/завершает выполнение текущей команды.
*   **`Ctrl + Z`**: Приостанавливает выполнение текущей команды (переводит в фоновый режим).
*   **`fg`**: Возобновляет выполнение приостановленной команды в текущем терминале (на переднем плане).
*   **История команд**: Используйте стрелки `Вверх`/`Вниз` для просмотра ранее введенных команд.

**Помощь и поиск команд/файлов:**

*   **`man <команда>`**: Открывает справочную страницу (manual) для команды. Содержит полное описание. Для выхода используйте **`Q`**, для поиска внутри — **`/`**, для перехода к следующему совпадению — **`N`**.
*   **`man -K <слово>`**: Ищет справочные страницы, содержащие указанное слово. Помогает найти команду, если вы знаете примерное название или функцию.
*   **`info <команда>`**: Показывает документацию команды в системе Info. Еще один формат документации. Для выхода используйте **`Q`**.
*   **`whatis <команда>`**: Выводит краткое описание команды. По сути, первая строка из man-страницы.
*   **`whereis <команда>`**: Показывает расположение исполняемого файла команды, исходников и man-страниц.
*   **`locate <файл>`**: Находит файлы по имени, используя предварительно построенную базу данных. Быстрый поиск, но база может быть не совсем актуальной.

**1. Проверка дисков:**

*   **Оставшееся место на жестких дисках:**
    *   **`df -h`**: Показывает занятое/свободное место на дисках в человекочитаемом формате (ГБ, МБ). Отображает примонтированные файловые системы.
*   **Место, занимаемое файлами/директориями:**
    *   **`du -s -m <директория>`**: Показывает суммарный размер файлов в указанной директории в мегабайтах. Ключ `-s` (summarize) для суммарного значения, `-m` (megabytes) для вывода в МБ.
*   **Проверка inode-ов:**
    *   **`df -i`**: Показывает общее количество inode-ов, использованных и свободных. Inode хранят служебную информацию о файлах (кроме имени). Если использовано **100%** inode-ов, это проблема, даже при наличии свободного места на диске.
*   **Состояние жестких дисков (SMART-отчеты):**
    *   **`smartctl -A <устройство>`**: Показывает SMART-отчет для обычных HDD (например, `/dev/sda`). Содержит информацию о модели, серийном номере, ошибках, количестве запусков, часах работы. Растущие параметры (`Reallocated Event Count`, `Reader Rate`) могут указывать на проблемы.
    *   **`smartctl -a -d nvme <устройство>`**: Показывает SMART-отчет для NVMe дисков (например, `/dev/nvme0n1`). Параметр `percentage_use` показывает процент использованного ресурса диска.
*   **Софтовые RAID массивы (mdadm):**
    *   Информацию можно посмотреть в файле **/proc/mdstat**. Видно количество массивов, тип, диски в массивах и их состояние.

**2. Проверка процессора и памяти (нагрузка):**

*   **Нагрузка на диски (ввод/вывод):**
    *   **`iostat`**: Показывает общую информацию о скорости чтения/записи на диск. Может потребоваться установка.
    *   **`iotop`**: Показывает, какие процессы читают/пишут на диск. Удобно для выявления "виновников" дисковой нагрузки. Может потребоваться установка.
*   **Общая информация о системе (load average, CPU usage, memory, processes):**
    *   **`top`**: Стандартная утилита. Показывает:
        *   **Load average**: Среднее количество процессов и операций ввода-вывода, ожидающих в очереди процессора.
        *   **CPU usage**: Использование CPU в разных режимах (user, system, nice, idle, wait/iowait, hardware/software interrupts, steal). `idle` (простой) и `wait/iowait` (ожидание ввода/вывода) важны для диагностики.
        *   Расход памяти.
        *   Список процессов.
    *   **`htop`**: Альтернатива `top` с более удобным интерфейсом, сортировкой, фильтрацией. Часто требует установки.
*   **Оперативная память:**
    *   Видно в `top` и `htop`.
    *   **`vmstat`**: Показывает информацию о памяти и виртуальной памяти.
    *   **`free -m`**: Показывает информацию о памяти в мегабайтах. Важные поля: `total`, `used`, `buffers/cache` (память, используемая ядром для кэширования данных диска), `free` (полностью свободная память).
    *   Подробная информация в файле **/proc/meminfo**.

**3. Проверка процессов:**

*   **Список запущенных процессов:**
    *   **`ps aux`**: Выводит все процессы, их пользователя, ID (PID), использование ресурсов, время запуска, команду. Помогает понять, запущен ли нужный процесс.
*   **Завершение процесса:**
    *   **`kill <ID процесса>`**: Принудительно завершает процесс по его ID (PID).
*   **Статус сервисов (управляемых systemd):**
    *   **`systemctl status <имя сервиса>`**: Показывает статус сервиса (например, `nginx`), последние записи из логов и PID главного процесса.
*   **Отладка процессов (системные вызовы):**
    *   **`strace <команда>`** или **`strace -p <ID процесса>`**: Показывает системные вызовы, выполняемые процессом в реальном времени. Для глубокой отладки.

**4. Проверка сети:**

*   **Прослушиваемые порты:**
    *   **`netstat -tulpn`**: Показывает процессы, слушающие сетевые порты (TCP/UDP, LISTEN статус, PID, имя программы). Помогает выявить конфликты портов. Может потребоваться установка.
    *   **`ss -tulpn`**: Встроенная альтернатива `netstat`, показывает аналогичную информацию.
*   **Сетевые интерфейсы и IP-адреса:**
    *   **`ip a`** (или **`ip addr`**): Показывает информацию о сетевых интерфейсах, IP-адресах (IPv4/IPv6), MAC-адресах, статистику пакетов.
    *   **`ifconfig`**: Альтернатива `ip a`.
*   **Сетевые маршруты:**
    *   **`netstat -rn`**: Показывает таблицу маршрутизации, включая шлюз по умолчанию. Может потребоваться установка.
    *   **`ip r`** (или **`ip route`**): Встроенная альтернатива `netstat -rn`.
*   **Диагностика доступности и пути пакетов:**
    *   **`ping <хост/IP>`**: Проверяет доступность удаленного хоста и работу DNS resolving, если указано доменное имя.
    *   **`traceroute <хост/IP>`**: Показывает путь пакетов до хоста, включая промежуточные маршрутизаторы.
    *   **`mtr <хост/IP>`**: Показывает трассировку в реальном времени, отображает потери пакетов на каждом узле пути.
*   **DNS запросы:**
    *   **`dig <домен>`**: Утилита для выполнения DNS запросов (A, MX, и др. записи). Можно указать конкретный DNS сервер для запроса (`dig <домен> @<IP_сервера>`).
    *   **`nslookup <домен>`**: Аналогично `dig`.
*   **Выполнение запросов к сетевым сервисам:**
    *   **`curl <URL>`**: Мощная утилита для выполнения HTTP/HTTPS запросов. Позволяет проверять коды ответа, сертификаты, заголовки.
    *   **`curl -v telnet://<IP>:<порт>`**: Проверяет доступность порта с использованием протокола telnet через `curl`. Удобно, если telnet клиент не установлен.
    *   **`curl --unix-socket <путь_к_сокету> <URL>`**: Позволяет делать запросы напрямую к Unix сокетам.
*   **Перехват и анализ сетевых пакетов:**
    *   **`tcpdump -i <интерфейс> port <порт> -nn`**: Показывает пакеты, проходящие через определенный интерфейс и порт. Полезно для проверки, доходят ли пакеты и получает ли сервер ответ. `-i any` слушает все интерфейсы. `-nn` отключает преобразование IP в доменные имена. Может потребоваться установка.

**5. Просмотр логов:**

*   **Стандартная директория логов:** **/var/log/**. Содержит множество файлов.
*   **Основной системный лог:** **/var/log/syslog**.
*   **Логи аутентификации и действий с привилегиями:** **/var/log/auth.log**.
*   **Сообщения ядра:** **/var/log/kern.log**.
*   **Просмотр содержимого логов:**
    *   **`tail <файл>`**: Показывает последние 10 строк файла.
    *   **`tail -f <файл>`**: "Следует" за файлом, показывая новые строки в реальном времени.
    *   **`tail -n <число> <файл>`**: Показывает указанное число последних строк.
*   **Сообщения ядра (альтернативный способ):**
    *   **`dmesg`**: Показывает сообщения ядра с момента загрузки системы.
    *   **`dmesg -T`**: Делает временные метки в выводе `dmesg` человекочитаемыми.
*   **Просмотр логов сервисов (управляемых systemd) с помощью `journalctl`:**
    *   **`journalctl`**: По умолчанию показывает все системные логи.
    *   **`journalctl -u <имя сервиса>`**: Фильтрует логи по указанному сервису (например, `journalctl -u nginx`).

**Заключение:**

Каждая проблема — это возможность научиться чему-то новому. Не бойтесь экспериментировать и исследовать. Знание этих команд является основой для успешного траблшутинга на Linux серверах.
